{
  "version": 3,
  "sources": ["../../js/examples/jsm/webxr/VRButton.js"],
  "sourcesContent": ["/**\n * A utility class for creating a button that allows to initiate\n * immersive VR sessions based on WebXR. The button can be created\n * with a factory method and then appended ot the website's DOM.\n *\n * ```js\n * document.body.appendChild( VRButton.createButton( renderer ) );\n * ```\n *\n * @hideconstructor\n */\nclass VRButton {\n\n\t/**\n\t * Constructs a new VR button.\n\t *\n\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t * @param {XRSessionInit} [sessionInit] - The a configuration object for the AR session.\n\t * @return {HTMLElement} The button or an error message if `immersive-ar` isn't supported.\n\t */\n\tstatic createButton( renderer, sessionInit = {} ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t// be requested separately.)\n\n\t\t\tconst sessionOptions = {\n\t\t\t\t...sessionInit,\n\t\t\t\toptionalFeatures: [\n\t\t\t\t\t'local-floor',\n\t\t\t\t\t'bounded-floor',\n\t\t\t\t\t'layers',\n\t\t\t\t\t...( sessionInit.optionalFeatures || [] )\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction showVRNotAllowed( exception ) {\n\n\t\t\tdisableButton();\n\n\t\t\tconsole.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n\t\t\tbutton.textContent = 'VR NOT ALLOWED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} ).catch( showVRNotAllowed );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a `sessiongranted` event listener. When a session is granted, the {@link VRButton#xrSessionIsGranted}\n\t * flag will evaluate to `true`. This method is automatically called by the module itself so there\n\t * should be no need to use it on app level.\n\t */\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n\t\t\t// WebXRViewer (based on Firefox) has a bug where addEventListener\n\t\t\t// throws a silent exception and aborts execution entirely.\n\t\t\tif ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Whether a XR session has been granted or not.\n *\n * @static\n * @type {boolean}\n * @default false\n */\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n"],
  "mappings": "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",
  "names": ["VRButton", "_VRButton", "renderer", "sessionInit", "button", "showEnterVR", "currentSession", "onSessionStarted", "session", "onSessionEnded", "sessionOptions", "err", "disableButton", "showWebXRNotFound", "showVRNotAllowed", "exception", "stylizeElement", "element", "supported", "message"]
}
