{
  "version": 3,
  "sources": ["../../js/examples/jsm/utils/WorkerPool.js"],
  "sourcesContent": ["/**\n * A simple pool for managing Web Workers.\n */\nexport class WorkerPool {\n\n\t/**\n\t * Constructs a new Worker pool.\n\t *\n\t * @param {number} [pool=4] - The size of the pool.\n\t */\n\tconstructor( pool = 4 ) {\n\n\t\t/**\n\t\t * The size of the pool.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.pool = pool;\n\n\t\t/**\n\t\t * A message queue.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.queue = [];\n\n\t\t/**\n\t\t * An array of Workers.\n\t\t *\n\t\t * @type {Array<Worker>}\n\t\t */\n\t\tthis.workers = [];\n\n\t\t/**\n\t\t * An array with resolve functions for messages.\n\t\t *\n\t\t * @type {Array<Function>}\n\t\t */\n\t\tthis.workersResolve = [];\n\n\t\t/**\n\t\t * The current worker status.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.workerStatus = 0;\n\n\t\t/**\n\t\t * A factory function for creating workers.\n\t\t *\n\t\t * @type {?Function}\n\t\t */\n\t\tthis.workerCreator = null;\n\n\t}\n\n\t_initWorker( workerId ) {\n\n\t\tif ( ! this.workers[ workerId ] ) {\n\n\t\t\tconst worker = this.workerCreator();\n\t\t\tworker.addEventListener( 'message', this._onMessage.bind( this, workerId ) );\n\t\t\tthis.workers[ workerId ] = worker;\n\n\t\t}\n\n\t}\n\n\t_getIdleWorker() {\n\n\t\tfor ( let i = 0; i < this.pool; i ++ )\n\t\t\tif ( ! ( this.workerStatus & ( 1 << i ) ) ) return i;\n\n\t\treturn - 1;\n\n\t}\n\n\t_onMessage( workerId, msg ) {\n\n\t\tconst resolve = this.workersResolve[ workerId ];\n\t\tresolve && resolve( msg );\n\n\t\tif ( this.queue.length ) {\n\n\t\t\tconst { resolve, msg, transfer } = this.queue.shift();\n\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t} else {\n\n\t\t\tthis.workerStatus ^= 1 << workerId;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets a function that is responsible for creating Workers.\n\t *\n\t * @param {Function} workerCreator - The worker creator function.\n\t */\n\tsetWorkerCreator( workerCreator ) {\n\n\t\tthis.workerCreator = workerCreator;\n\n\t}\n\n\t/**\n\t * Sets the Worker limit\n\t *\n\t * @param {number} pool - The size of the pool.\n\t */\n\tsetWorkerLimit( pool ) {\n\n\t\tthis.pool = pool;\n\n\t}\n\n\t/**\n\t * Post a message to an idle Worker. If no Worker is available,\n\t * the message is pushed into a message queue for later processing.\n\t *\n\t * @param {Object} msg - The message.\n\t * @param {Array<ArrayBuffer>} transfer - An array with array buffers for data transfer.\n\t * @return {Promise} A Promise that resolves when the message has been processed.\n\t */\n\tpostMessage( msg, transfer ) {\n\n\t\treturn new Promise( ( resolve ) => {\n\n\t\t\tconst workerId = this._getIdleWorker();\n\n\t\t\tif ( workerId !== - 1 ) {\n\n\t\t\t\tthis._initWorker( workerId );\n\t\t\t\tthis.workerStatus |= 1 << workerId;\n\t\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t\t} else {\n\n\t\t\t\tthis.queue.push( { resolve, msg, transfer } );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Terminates all Workers of this pool. Call this  method whenever this\n\t * Worker pool is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.workers.forEach( ( worker ) => worker.terminate() );\n\t\tthis.workersResolve.length = 0;\n\t\tthis.workers.length = 0;\n\t\tthis.queue.length = 0;\n\t\tthis.workerStatus = 0;\n\n\t}\n\n}\n"],
  "mappings": "MAGO,IAAMA,EAAN,KAAiB,CAOvB,YAAaC,EAAO,EAAI,CAQvB,KAAK,KAAOA,EAOZ,KAAK,MAAQ,CAAC,EAOd,KAAK,QAAU,CAAC,EAOhB,KAAK,eAAiB,CAAC,EAOvB,KAAK,aAAe,EAOpB,KAAK,cAAgB,IAEtB,CAEA,YAAaC,EAAW,CAEvB,GAAK,CAAE,KAAK,QAASA,CAAS,EAAI,CAEjC,IAAMC,EAAS,KAAK,cAAc,EAClCA,EAAO,iBAAkB,UAAW,KAAK,WAAW,KAAM,KAAMD,CAAS,CAAE,EAC3E,KAAK,QAASA,CAAS,EAAIC,CAE5B,CAED,CAEA,gBAAiB,CAEhB,QAAUC,EAAI,EAAGA,EAAI,KAAK,KAAMA,IAC/B,GAAK,EAAI,KAAK,aAAiB,GAAKA,GAAQ,OAAOA,EAEpD,MAAO,EAER,CAEA,WAAYF,EAAUG,EAAM,CAE3B,IAAMC,EAAU,KAAK,eAAgBJ,CAAS,EAG9C,GAFAI,GAAWA,EAASD,CAAI,EAEnB,KAAK,MAAM,OAAS,CAExB,GAAM,CAAE,QAAAC,EAAS,IAAAD,EAAK,SAAAE,CAAS,EAAI,KAAK,MAAM,MAAM,EACpD,KAAK,eAAgBL,CAAS,EAAII,EAClC,KAAK,QAASJ,CAAS,EAAE,YAAaG,EAAKE,CAAS,CAErD,MAEC,KAAK,cAAgB,GAAKL,CAI5B,CAOA,iBAAkBM,EAAgB,CAEjC,KAAK,cAAgBA,CAEtB,CAOA,eAAgBP,EAAO,CAEtB,KAAK,KAAOA,CAEb,CAUA,YAAaI,EAAKE,EAAW,CAE5B,OAAO,IAAI,QAAWD,GAAa,CAElC,IAAMJ,EAAW,KAAK,eAAe,EAEhCA,IAAa,IAEjB,KAAK,YAAaA,CAAS,EAC3B,KAAK,cAAgB,GAAKA,EAC1B,KAAK,eAAgBA,CAAS,EAAII,EAClC,KAAK,QAASJ,CAAS,EAAE,YAAaG,EAAKE,CAAS,GAIpD,KAAK,MAAM,KAAM,CAAE,QAAAD,EAAS,IAAAD,EAAK,SAAAE,CAAS,CAAE,CAI9C,CAAE,CAEH,CAMA,SAAU,CAET,KAAK,QAAQ,QAAWJ,GAAYA,EAAO,UAAU,CAAE,EACvD,KAAK,eAAe,OAAS,EAC7B,KAAK,QAAQ,OAAS,EACtB,KAAK,MAAM,OAAS,EACpB,KAAK,aAAe,CAErB,CAED",
  "names": ["WorkerPool", "pool", "workerId", "worker", "i", "msg", "resolve", "transfer", "workerCreator"]
}
